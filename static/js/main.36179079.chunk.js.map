{"version":3,"sources":["Fetch.js","SkillList.js","ResponsibilitiesList.js","JobList.js","App.js","serviceWorker.js","index.js"],"names":["Fetch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this$props","sheet","_this$props$end","end","fetch","concat","then","response","json","handleData","bind","catch","console","error","d","values","valueRanges","keys","shift","map","value","reduce","a","v","i","setState","render","react_default","createElement","JSON","stringify","React","Component","SkillList","_ref","items","skills","skill","key","id","competency","ResponsibilitiesList","responsibilities","log","res","text","JobList","jobs","job","title","company","start","desc","Fetch_Fetch","filter","job_id","App","className","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36179079.chunk.js","sourcesContent":["import React from 'react';\n\nconst SHEET_ID = '14YuaCm0-0t5knx5Io8THSDn3IcAqvtn2B-o0ZHB_S7I';\nconst API_KEY = 'AIzaSyD4KBu9Uk0Fq_hJ8c7Zz5kbkGxM8LYU6wM';\n\nexport default class Fetch extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: null,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { sheet, end = 'A' } = this.props;\n\t\tfetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values:batchGet?ranges=${sheet}!A:${end}&key=${API_KEY}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(this.handleData.bind(this))\n\t\t\t.catch(console.error);\n\t}\n\n\thandleData(d) {\n\t\tconst { values } = d.valueRanges[0];\n\t\tconst keys = values.shift();\n\t\tconst data = values.map(value => {\n\t\t\treturn value.reduce((a, v, i) => {\n\t\t\t\ta[keys[i]] = v;\n\t\t\t\treturn a;\n\t\t\t}, {});\n\t\t});\n\t\tthis.setState({ data });\n\t}\n\n\trender() {\n\t\tconst { data } = this.state;\n\t\treturn (data)\n\t\t\t? this.props.render\n\t\t\t\t? this.props.render(data)\n\t\t\t\t: <p>{JSON.stringify(data)}</p>\n\t\t\t: <p>loading...</p>;\n\t}\n}\n","import React from 'react';\n\nexport default function SkillList({ skills }) {\n\tconst items = skills.map(skill => (\n\t\t<li key={skill.id}><strong>{skill.skill}</strong> {skill.competency}</li>\n\t));\n\treturn <ul>{items}</ul>\n}","import React from 'react';\n\nexport default function ResponsibilitiesList({ responsibilities }) {\n\tconsole.log(responsibilities);\n\tconst items = responsibilities.map(res => (\n\t\t<li key={res.id}>{res.text}</li>\n\t));\n\treturn <ul>{items}</ul>\n}","import React from 'react';\nimport Fetch from './Fetch';\nimport ResponsibilitiesList from './ResponsibilitiesList';\n\nexport default function JobList({ jobs }) {\n\tconst items = jobs.map(job => (\n\t\t<li key={job.id}>\n\t\t\t<h2><strong>{job.title}</strong> {job.company}</h2>\n\t\t\t<p>{job.start}&mdash;{job.end}</p>\n\t\t\t<p>{job.desc}</p>\n\t\t\t<Fetch sheet={'responsibilities'} end={'C'} render={data => <ResponsibilitiesList responsibilities={data.filter(d => d.job_id === job.id)} />} />\n\t\t</li>\n\t));\n\treturn <ul>{items}</ul>\n}","import React from 'react';\nimport Fetch from './Fetch';\nimport SkillList from './SkillList';\nimport JobList from './JobList';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Fetch sheet={'skills'} end={\"C\"} render={data => <SkillList skills={data} />} />\n        <Fetch sheet={'jobs'} end={\"F\"} render={data => <JobList jobs={data} />} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}